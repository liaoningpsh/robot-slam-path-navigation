// Generated by gencpp from file lingao_msgs/LingAoRCStatus.msg
// DO NOT EDIT!


#ifndef LINGAO_MSGS_MESSAGE_LINGAORCSTATUS_H
#define LINGAO_MSGS_MESSAGE_LINGAORCSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace lingao_msgs
{
template <class ContainerAllocator>
struct LingAoRCStatus_
{
  typedef LingAoRCStatus_<ContainerAllocator> Type;

  LingAoRCStatus_()
    : header()
    , connect(false)
    , CH1(0)
    , CH2(0)
    , CH3(0)
    , CH4(0)
    , CH5(0)
    , CH6(0)
    , CH7(0)
    , CH8(0)
    , CH9(0)
    , CH10(0)  {
    }
  LingAoRCStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , connect(false)
    , CH1(0)
    , CH2(0)
    , CH3(0)
    , CH4(0)
    , CH5(0)
    , CH6(0)
    , CH7(0)
    , CH8(0)
    , CH9(0)
    , CH10(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _connect_type;
  _connect_type connect;

   typedef int8_t _CH1_type;
  _CH1_type CH1;

   typedef int8_t _CH2_type;
  _CH2_type CH2;

   typedef int8_t _CH3_type;
  _CH3_type CH3;

   typedef int8_t _CH4_type;
  _CH4_type CH4;

   typedef int8_t _CH5_type;
  _CH5_type CH5;

   typedef int8_t _CH6_type;
  _CH6_type CH6;

   typedef int8_t _CH7_type;
  _CH7_type CH7;

   typedef int8_t _CH8_type;
  _CH8_type CH8;

   typedef int8_t _CH9_type;
  _CH9_type CH9;

   typedef int8_t _CH10_type;
  _CH10_type CH10;





  typedef boost::shared_ptr< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> const> ConstPtr;

}; // struct LingAoRCStatus_

typedef ::lingao_msgs::LingAoRCStatus_<std::allocator<void> > LingAoRCStatus;

typedef boost::shared_ptr< ::lingao_msgs::LingAoRCStatus > LingAoRCStatusPtr;
typedef boost::shared_ptr< ::lingao_msgs::LingAoRCStatus const> LingAoRCStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lingao_msgs::LingAoRCStatus_<ContainerAllocator1> & lhs, const ::lingao_msgs::LingAoRCStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.connect == rhs.connect &&
    lhs.CH1 == rhs.CH1 &&
    lhs.CH2 == rhs.CH2 &&
    lhs.CH3 == rhs.CH3 &&
    lhs.CH4 == rhs.CH4 &&
    lhs.CH5 == rhs.CH5 &&
    lhs.CH6 == rhs.CH6 &&
    lhs.CH7 == rhs.CH7 &&
    lhs.CH8 == rhs.CH8 &&
    lhs.CH9 == rhs.CH9 &&
    lhs.CH10 == rhs.CH10;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lingao_msgs::LingAoRCStatus_<ContainerAllocator1> & lhs, const ::lingao_msgs::LingAoRCStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lingao_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c06b6cb58b0a81562a8993101c944318";
  }

  static const char* value(const ::lingao_msgs::LingAoRCStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc06b6cb58b0a8156ULL;
  static const uint64_t static_value2 = 0x2a8993101c944318ULL;
};

template<class ContainerAllocator>
struct DataType< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lingao_msgs/LingAoRCStatus";
  }

  static const char* value(const ::lingao_msgs::LingAoRCStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"bool connect\n"
"int8 CH1\n"
"int8 CH2\n"
"int8 CH3\n"
"int8 CH4\n"
"int8 CH5\n"
"int8 CH6\n"
"int8 CH7\n"
"int8 CH8\n"
"int8 CH9\n"
"int8 CH10\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::lingao_msgs::LingAoRCStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.connect);
      stream.next(m.CH1);
      stream.next(m.CH2);
      stream.next(m.CH3);
      stream.next(m.CH4);
      stream.next(m.CH5);
      stream.next(m.CH6);
      stream.next(m.CH7);
      stream.next(m.CH8);
      stream.next(m.CH9);
      stream.next(m.CH10);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LingAoRCStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lingao_msgs::LingAoRCStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lingao_msgs::LingAoRCStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "connect: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connect);
    s << indent << "CH1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CH1);
    s << indent << "CH2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CH2);
    s << indent << "CH3: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CH3);
    s << indent << "CH4: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CH4);
    s << indent << "CH5: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CH5);
    s << indent << "CH6: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CH6);
    s << indent << "CH7: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CH7);
    s << indent << "CH8: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CH8);
    s << indent << "CH9: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CH9);
    s << indent << "CH10: ";
    Printer<int8_t>::stream(s, indent + "  ", v.CH10);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LINGAO_MSGS_MESSAGE_LINGAORCSTATUS_H
